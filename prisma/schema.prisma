generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @map("user_id")
  clerkId   String   @unique
  resumes   Resume[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resume {
  id          String          @id @default(dbgenerated("gen_random_uuid()")) @map("resume_id")
  userId      String
  title       String
  template    String
  colorScheme String
  fontStyle   String
  intro       Intro?
  about       About?
  workExperiences WorkExperience[]
  educations  Education[]
  skills      Skill[]
  projects    Project[]
  hackathons  Hackathon[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Intro {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @map("intro_id")
  resumeId  String   @unique
  content   String   // E.g., "Hi, I'm Dillion ðŸ‘‹ Software Engineer turned Entrepreneur..."
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model About {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @map("about_id")
  resumeId  String   @unique
  content   String   // E.g., "At the end of 2022, I quit my job as a software engineer..."
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model WorkExperience {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @map("work_experience_id")
  resumeId    String
  companyName String
  startDate   DateTime
  endDate     DateTime?
  position    String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Education {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @map("education_id")
  resumeId    String
  institution String
  degree      String
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Skill {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @map("skill_id")
  resumeId  String
  name      String   // E.g., "React", "Next.js"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Project {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @map("project_id")
  resumeId    String
  title       String
  description String
  technologies String[]
  startDate   DateTime
  endDate     DateTime?
  link        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Hackathon {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @map("hackathon_id")
  resumeId    String
  title       String
  location    String
  date        DateTime
  description String
  link        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}
